// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  Page          Page[]          @relation("pageOwner")
  Notifiactions Notifications[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// model User {
//   id            String          @unique @default(uuid())
//   firstName     String
//   lastName      String
//   createAt      DateTime        @default(now())
//   updateAt      DateTime
//   image         String
//   //other
// }

model Page {
  id       String   @id @unique @default(uuid())
  name     String
  admin    User     @relation("pageOwner", fields: [adminId], references: [id])
  adminId  String
  createAt DateTime @default(now())
  updateAt DateTime
  image    String
  //clips
  //series
  movies   Movies[]
  clips    Clips[]
  series   Series[]
}

model Movies {
  id          String   @id @unique @default(uuid())
  name        String
  overview    String?
  video       String
  //comment
  likes       String[] //list of user's id who like
  createAt    DateTime @default(now())
  updateAt    DateTime
  image       String
  createdBy   Page     @relation(fields: [pageOwnerId], references: [id])
  pageOwnerId String
}

model Clips {
  id          String   @id @unique @default(uuid())
  name        String
  content     String?
  video       String
  //comment
  likes       String[] //list of user's id who like
  createAt    DateTime @default(now())
  updateAt    DateTime
  image       String
  createdBy   Page     @relation(fields: [pageOwnerId], references: [id])
  pageOwnerId String
}

model Series {
  id          String     @id @unique @default(uuid())
  name        String
  content     String?
  video       String?
  //comment
  likes       String[] //list of user's id who like
  createAt    DateTime   @default(now())
  updateAt    DateTime
  image       String
  createdBy   Page       @relation(fields: [pageOwnerId], references: [id])
  pageOwnerId String
  episodes    Episodes[]
}

model Episodes {
  id        String   @unique @default(uuid())
  name      String
  content   String?
  video     String
  //comment
  likes     String[] //list of user's id who like
  createAt  DateTime @default(now())
  updateAt  DateTime
  image     String
  createdBy Series   @relation(fields: [seriesId], references: [id])
  seriesId  String
}

model Notifications {
  id        String   @id @unique @default(uuid())
  type      String
  content   String
  watched   Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String?
  notiTo    User     @relation(fields: [userId], references: [id])
  userId    String
}
