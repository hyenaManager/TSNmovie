// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pool
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String          @id @default(uuid())
  firstName         String
  lastName          String
  email             String?         @unique
  password          String?
  emailVerified     DateTime?
  bio               String          @default("no bio")
  image             String          @default("https://firebasestorage.googleapis.com/v0/b/tsnproject-4c406.appspot.com/o/users%2F1.svg?alt=media&token=a6d8ef94-0696-401c-b5d1-24a03bd521d3&_gl=1*1x2c3qd*_ga*MTUwMzg0NTkxMS4xNjg0ODU2NzUw*_ga_CW55HF8NVT*MTY5ODMzMzIxMC40OS4xLjE2OTgzMzMyMjcuNDMuMC4w")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  suspended         Suspended?      @relation("suspended")
  role              UserRole        @default(USER)
  following         Page[]          @relation("follow") //follow multiple pages m-to-m
  likes             Clips[]         @relation("like") //multiple likes for clips m-to-m
  accounts          Account[]
  sessions          Session[]
  Page              Page?
  Like              Likes[]         @relation("likes")
  Notifications     Notifications[] @relation("notificationOwner")
  NotificationsMade Notifications[] @relation("notificationMaker")
  Replied           Comment[]       @relation("replied")
  Comment           Comment[]
  reports           Reports[]       @relation("report")
}

model Suspended {
  id                 String   @id @default(uuid())
  suspendedUser      User     @relation("suspended", fields: [suspendedUserEmail], references: [email])
  suspendedUserEmail String   @unique
  startDate          DateTime
  endDate            DateTime
  message            String
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Page {
  id          String   @id @unique @default(uuid())
  name        String
  admin       User     @relation(fields: [adminId], references: [id])
  followers   User[]   @relation("follow")
  search      String?
  adminId     String   @unique
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  image       String
  viewedBy    String[] //collect user's email 
  viewedCount Int      @default(0) //count of users who viewed page
  ratedBy     String[]
  rating      Int      @default(0)
  coverImage  String?
  movies      Movies[]
  clips       Clips[]
  series      Series[]
  contact     Contact? @relation("contact")
}

model Contact {
  id          String   @id @default(uuid())
  facebook    String?
  twitter     String?
  telegram    String?
  whatsapp    String?
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  relatedPage Page     @relation("contact", fields: [pageId], references: [id])
  pageId      String   @unique
}

model Movies {
  id          String   @id @unique @default(uuid())
  name        String
  overview    String?
  video       String
  //comment
  likes       String[] //list of user's id who like
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  image       String?
  createdBy   Page     @relation(fields: [pageOwnerId], references: [id])
  pageOwnerId String
}

model Clips {
  id          Int       @id @unique @default(autoincrement())
  title       String?
  video       String
  comment     Comment[]
  likes       User[]    @relation("like")
  reports     Reports[] @relation("report")
  link        String?
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  createdBy   Page      @relation(fields: [pageOwnerId], references: [id])
  pageOwnerId String
}

model Likes {
  id        String   @id @default(uuid())
  likedBy   User[]   @relation("likes")
  totalLike Int
  holderId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Series {
  id           String     @id @unique @default(uuid())
  name         String
  content      String?
  video        String?
  genre        String?
  releasedDate String?
  //comment
  likes        String[] //list of user's id who like
  createAt     DateTime   @default(now())
  updateAt     DateTime   @updatedAt
  image        String
  viewedBy     String[]
  viewedCount  Int        @default(0)
  createdBy    Page       @relation(fields: [pageOwnerId], references: [id])
  pageOwnerId  String
  episodes     Episodes[]
}

model Episodes {
  id            String   @unique @default(uuid())
  name          String
  content       String?
  video         String
  //comment
  episodeNumber Int
  likes         String[] //list of user's id who like
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt
  image         String?
  createdBy     Series   @relation(fields: [seriesId], references: [id])
  seriesId      String
}

model Notifications {
  id        String   @id @unique @default(uuid())
  type      String
  message   String
  holder    String //holder may be clip,movie,episode(video)
  holderId  Int? //so the user can fetch(see) the reacted clip,movie or episode
  watched   Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String?
  notiTo    User     @relation("notificationOwner", fields: [userId], references: [id])
  userId    String
  notiBy    User     @relation("notificationMaker", fields: [userEmail], references: [email])
  userEmail String
}

model Comment {
  id              String    @id @unique @default(uuid())
  text            String
  repliedTo       User?     @relation("replied", fields: [repliedToUserId], references: [id]) //user who got replied(not replier)
  repliedToUserId String?
  userId          String
  user            User      @relation(fields: [userId], references: [id]) //user who comment or reply
  userImage       String? //for using the in replied comment image...
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  clipId          Int?
  clip            Clips?    @relation(fields: [clipId], references: [id])
  parentId        String?
  //many-to-one relationship between Comment and its parent Comment 
  parent          Comment?  @relation("childComments", fields: [parentId], references: [id])
  // one-to-many relationship between Comment and its child Comments for reply
  childComments   Comment[] @relation("childComments")
}

model Reports {
  id        String   @id @default(uuid())
  post      Clips    @relation("report", fields: [postId], references: [id])
  postId    Int
  postOwner User     @relation("report", fields: [userId], references: [id])
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
}
